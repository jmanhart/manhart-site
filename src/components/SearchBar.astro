---
// SearchBar.astro

export let onSearch;
---

<div class="search-bar autocomplete-container">
  <label for="searchInput">Search:</label>
  <input
    type="text"
    id="searchInput"
    placeholder="Search by artist or album title"
    autocomplete="off"
  />
  <div id="autocomplete-list" class="autocomplete-list"></div>
</div>

<script client:load>
  let autocompleteSuggestions = [];
  let selectedIndex = -1; // Track selected index for navigation
  const maxSuggestions = 5; // Limit number of suggestions

  // ✅ Handle Search Filter
  function handleSearch() {
    const searchInput = document.getElementById("searchInput").value.toLowerCase();
    const records = JSON.parse(document.getElementById("collection-data").textContent);

    const filteredCollection = records.filter((record) => {
      return (
        record.artist.toLowerCase().includes(searchInput) ||
        record.title.toLowerCase().includes(searchInput)
      );
    });

    // ✅ Unique autocomplete suggestions (no duplicates)
    autocompleteSuggestions = Array.from(
      new Set(
        records
          .map(record => record.artist)
          .filter(artist => artist.toLowerCase().includes(searchInput))
      )
    ).slice(0, maxSuggestions);

    selectedIndex = -1; // Reset selection
    updateAutocomplete();
    window.dispatchEvent(new CustomEvent("updateList", { detail: filteredCollection }));
  }

  // ✅ Update the autocomplete dropdown
  function updateAutocomplete() {
    const autocompleteList = document.getElementById("autocomplete-list");
    autocompleteList.innerHTML = autocompleteSuggestions
      .map((suggestion, index) => `
        <div 
          class="autocomplete-item ${index === selectedIndex ? 'selected' : ''}"
          onclick="selectSuggestion('${suggestion}')"
          onmouseover="highlightItem(${index})"
          data-index="${index}">
          ${suggestion}
        </div>`)
      .join("");
    autocompleteList.style.display = autocompleteSuggestions.length ? "block" : "none";
  }

  // ✅ Select a suggestion
  function selectSuggestion(suggestion) {
    const input = document.getElementById("searchInput");
    input.value = suggestion;
    input.focus(); // Keep focus after selection
    closeAutocomplete();
    handleSearch();
  }

  // ✅ Highlight item on hover
  function highlightItem(index) {
    selectedIndex = index;
    updateAutocomplete();
  }

  // ✅ Close the autocomplete list
  function closeAutocomplete() {
    document.getElementById("autocomplete-list").style.display = "none";
  }

  // ✅ Keyboard navigation (Arrow Up/Down and Enter)
  document.getElementById("searchInput").addEventListener("keydown", (event) => {
    const listLength = autocompleteSuggestions.length;

    if (listLength > 0) {
      if (event.key === "ArrowDown") {
        selectedIndex = (selectedIndex + 1) % listLength; // Loop down
        updateAutocomplete();
        event.preventDefault();
      } else if (event.key === "ArrowUp") {
        selectedIndex = (selectedIndex - 1 + listLength) % listLength; // Loop up
        updateAutocomplete();
        event.preventDefault();
      } else if (event.key === "Enter" && selectedIndex >= 0) {
        selectSuggestion(autocompleteSuggestions[selectedIndex]);
        event.preventDefault();
      }
    }
  });

  // ✅ Close autocomplete when clicking outside
  document.addEventListener("click", (event) => {
    if (!event.target.closest(".autocomplete-container")) {
      closeAutocomplete();
    }
  });

  // ✅ Initialize events
  document.addEventListener("DOMContentLoaded", () => {
    document.getElementById("searchInput").addEventListener("input", handleSearch);
  });
</script>

<!-- ✅ CSS Styles for Search Component -->
<style>
  /* ✅ Search bar container */
  .search-bar {
    position: relative;
    margin-bottom: 15px;
  }

  /* ✅ Input field */
  input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 6px;
    font-size: 16px;
    transition: border-color 0.3s;
  }

  input:focus {
    border-color: #007bff;
    outline: none;
  }

  /* ✅ Autocomplete list */
  .autocomplete-list {
    position: absolute;
    border: 1px solid #ccc;
    background: #fff;
    width: 100%;
    border-radius: 8px;
    overflow: hidden;
    z-index: 10;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  /* ✅ Autocomplete item */
  .autocomplete-item {
    padding: 12px;
    cursor: pointer;
    border-bottom: 1px solid #ddd;
    font-size: 14px;
    transition: background-color 0.2s;
    color: #333;
  }

  /* ✅ Last item no border */
  .autocomplete-item:last-child {
    border-bottom: none;
  }

  /* ✅ Hover and keyboard selection */
  .autocomplete-item:hover,
  .autocomplete-item.selected {
    background-color: #007bff;
    color: white;
  }

  /* ✅ Mobile touch-friendly */
  @media (hover: none) {
    .autocomplete-item {
      padding: 16px;
      font-size: 16px;
    }
  }
</style>
