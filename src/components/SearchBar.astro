---
// SearchBar.astro

export let onSearch;
---

<div class="search-bar autocomplete-container">
  <input
    type="text"
    id="searchInput"
    placeholder="Search by artist or album title"
    autocomplete="off"
  />

  <!-- ‚úÖ Static test elements to verify styles -->
  <div id="autocomplete-list" class="autocomplete-list">

  </div>
</div>

<script client:load>
  console.log("‚úÖ SearchBar component loaded");

  let autocompleteSuggestions = [];
  let selectedIndex = -1;
  const maxSuggestions = 10;

  // ‚úÖ Ensure elements exist before attaching events
  const searchInput = document.getElementById("searchInput");
  const autocompleteList = document.getElementById("autocomplete-list");

  if (!searchInput || !autocompleteList) {
    console.error("‚ùå Search input or autocomplete list not found");
  }

  // ‚úÖ Handle Search Filter
  function handleSearch() {
    console.log("üîé Searching...");
    const searchInputValue = searchInput.value.toLowerCase();
    const records = JSON.parse(document.getElementById("collection-data").textContent);

    const filteredCollection = records.filter((record) => {
      return (
        record.artist.toLowerCase().includes(searchInputValue) ||
        record.title.toLowerCase().includes(searchInputValue)
      );
    });

    // ‚úÖ Unique autocomplete suggestions
    autocompleteSuggestions = Array.from(
      new Set(
        records
          .map((record) => record.artist)
          .filter((artist) => artist.toLowerCase().includes(searchInputValue))
      )
    ).slice(0, maxSuggestions);

    selectedIndex = -1;
    updateAutocomplete();
    window.dispatchEvent(new CustomEvent("updateList", { detail: filteredCollection }));
  }

  // ‚úÖ Update the autocomplete dropdown
  function updateAutocomplete() {
    autocompleteList.innerHTML = "";

    autocompleteSuggestions.forEach((suggestion, index) => {
      const item = document.createElement("div");
      item.classList.add("autocomplete-item");
      if (index === selectedIndex) item.classList.add("selected");
      item.textContent = suggestion;

      item.onclick = () => selectSuggestion(suggestion);
      item.onmouseover = () => highlightItem(index);
      autocompleteList.appendChild(item);
    });

    autocompleteList.style.display = autocompleteSuggestions.length ? "block" : "none";
    console.log("üìã Autocomplete updated:", autocompleteSuggestions);
  }

  // ‚úÖ Select a suggestion
  function selectSuggestion(suggestion) {
    searchInput.value = suggestion;
    searchInput.focus();
    closeAutocomplete();
    handleSearch();
    console.log(`‚úÖ Selected: ${suggestion}`);
  }

  // ‚úÖ Highlight item on hover
  function highlightItem(index) {
    selectedIndex = index;
    updateAutocomplete();
  }

  // ‚úÖ Close the autocomplete list
  function closeAutocomplete() {
    autocompleteList.style.display = "none";
    console.log("‚ùå Autocomplete closed");
  }

  // ‚úÖ Keyboard navigation (Arrow Up/Down and Enter)
  document.getElementById("searchInput").addEventListener("keydown", (event) => {
    const listLength = autocompleteSuggestions.length;

    if (listLength > 0) {
      if (event.key === "ArrowDown") {
        selectedIndex = (selectedIndex + 1) % listLength; // Loop down
        updateAutocomplete();
        event.preventDefault();
      } else if (event.key === "ArrowUp") {
        selectedIndex = (selectedIndex - 1 + listLength) % listLength; // Loop up
        updateAutocomplete();
        event.preventDefault();
      } else if (event.key === "Enter") {
        if (selectedIndex >= 0) {
          selectSuggestion(autocompleteSuggestions[selectedIndex]);
        }
        closeAutocomplete(); // ‚úÖ Close menu after hitting Enter
        event.preventDefault();
      }
    }
  });

  // ‚úÖ Close autocomplete when clicking outside
  document.addEventListener("click", (event) => {
    if (!event.target.closest(".autocomplete-container")) {
      closeAutocomplete();
    }
  });

  // ‚úÖ Initialize events
  document.addEventListener("DOMContentLoaded", () => {
    searchInput.addEventListener("input", handleSearch);
    console.log("üîÅ Event listeners attached");
  });
</script>

<style>
  /* ‚úÖ Global styles to avoid Astro scoping issues */
  :global(.search-bar) {
    position: relative;
    margin-bottom: 15px;
  }

  :global(input) {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 6px;
    font-size: 16px;
    transition: border-color 0.3s;
  }

  :global(input:focus) {
    border-color: #007bff;
    outline: none;
  }

  :global(.autocomplete-list) {
    position: absolute;
    /* border: 1px solid #ccc; */
    background: white;
    width: 100%;
    border-radius: 8px;
    overflow: hidden;
    z-index: 10;
    /* box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); */
  }

  :global(.autocomplete-item) {
    padding: 12px 12px;
    cursor: pointer;
    border-bottom: 1px solid #ddd;
    font-size: 14px;
    transition: background-color 0.2s;
    color: #333;
  }

  :global(.autocomplete-item:last-child) {
    border-bottom: none;
  }

  :global(.autocomplete-item:hover),
  :global(.autocomplete-item.selected) {
    background-color: #007bff;
    color: white;
  }

  @media (hover: none) {
    :global(.autocomplete-item) {
      padding: 16px;
      font-size: 16px;
    }
  }
</style>
