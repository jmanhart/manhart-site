---
import ProjectHeaderContent from "./ProjectHeaderContent.astro";

interface Props {
  // Core content
  title: string;
  description: string;
  
  // Layout
  height?: string;
  variant?: 'default' | 'minimal' | 'featured';
  
  // Links
  href?: string; // Internal route for the entire card
  links?: {
    live?: { url: string; text?: string };
    github?: { url: string; text?: string };
  };
  
  // Legacy props for backward compatibility
  liveUrl?: string;
  githubUrl?: string;
  liveSiteText?: string;
  githubText?: string;
}

const { 
  title, 
  description, 
  height = '180px', 
  variant = 'default', 
  href,
  links,
  // Legacy props
  liveUrl,
  githubUrl,
  liveSiteText,
  githubText
} = Astro.props;

// Normalize link data - support both new and legacy formats
const normalizedLinks = links || {
  live: liveUrl ? { url: liveUrl, text: liveSiteText } : undefined,
  github: githubUrl ? { url: githubUrl, text: githubText } : undefined
};

// Check if we have any links to show
const hasLinks = !!(normalizedLinks.live || normalizedLinks.github);

// Debug logging
console.log('ProjectHeader Debug:', {
  liveUrl,
  githubUrl,
  liveSiteText,
  githubText,
  normalizedLinks,
  hasLinks
});

---

{/* Conditional wrapper - wrap the entire content if href is provided */}
{href ? (
  <a href={href} class="project-header-link" aria-label={`View ${title} project`}>
    <ProjectHeaderContent 
      title={title}
      description={description}
      height={height}
      variant={variant}
      hasLinks={hasLinks}
      normalizedLinks={normalizedLinks}
    />
  </a>
) : (
  <ProjectHeaderContent 
    title={title}
    description={description}
    height={height}
    variant={variant}
    hasLinks={hasLinks}
    normalizedLinks={normalizedLinks}
  />
)}

<style lang="scss">
  @import "../styles/_mixins.scss";

  .project-header-link {
    text-decoration: none;
    color: inherit;
    display: block;
    cursor: pointer;
    
    &:hover {
      .project-header-wrapper {
        box-shadow: var(--card-shadow-hover);
        border-color: var(--card-shadow-hover);
        color: var(--text-tertiary);
      }
    }
    
    &:focus {
      outline: 2px solid var(--link);
      outline-offset: 2px;
    }
    
    &:focus-visible {
      .project-header-wrapper {
        border-color: var(--link);
      }
    }
  }
</style>
