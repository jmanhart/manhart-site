{"version":3,"file":"records_dfdb4bfd.mjs","sources":["../../../../../src/pages/records.astro"],"sourcesContent":["---\nimport BaseHead from \"../components/BaseHead.astro\";\nimport { SITE_TITLE, SITE_DESCRIPTION } from \"../config\";\nimport Header from \"../components/Header.astro\";\n---\n\n<html lang=\"en\">\n  <head>\n    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />\n  </head>\n  <body>\n    <Header />\n    <div class=\"root-wrapper\" id=\"sub-page\">\n      <div class=\"root-content text-page\">\n        <div class=\"info-container\">\n          <h1>ðŸŽ¶ All Records</h1>\n          <p id=\"collection-count\"></p>\n          <div id=\"collection-list\"></div>\n\n        </div>\n      </div>\n    </div>\n    <script>\n      // Define the Discogs API endpoint and your API key\n      const apiKey = import.meta.env.PUBLIC_DISCOGS_API_TOKEN;\n      const apiUrl =\n        \"https://api.discogs.com/users/manhartjohn/collection/folders/0/releases?per_page=250\";\n\n      // Initialize an empty array to store the collection data\n      let collection = [];\n\n      // Fetch the collection data from the Discogs API\n      const fetchCollection = async () => {\n        const response = await fetch(apiUrl, {\n          headers: {\n            Authorization: `Discogs token=${apiKey}`,\n          },\n        });\n\n        const data = await response.json();\n        collection = data.releases;\n        renderCollection();\n      };\n\n      // Render the collection data in the template\n      const renderCollection = () => {\n        const collectionCount = document.getElementById(\"collection-count\");\n        const collectionList = document.getElementById(\"collection-list\");\n\n        // Display the total number of releases in the collection\n        collectionCount.textContent = `Album Count: ${collection.length}`;\n\n        collection.forEach((release) => {\n          // Extract the artist, album name, and length from the release object\n          const artist = release.basic_information.artists[0].name;\n          const albumName = release.basic_information.title;\n\n          // Create the artist element and text node\n          const artistElem = document.createElement(\"p\");\n          const artistText = document.createTextNode(artist);\n          artistElem.appendChild(artistText);\n          artistElem.style.margin = \"0\";\n\n          // Create the album element and text node\n          const albumElem = document.createElement(\"h3\");\n          const albumText = document.createTextNode(albumName);\n          albumElem.appendChild(albumText);\n          albumElem.style.fontStyle = \"italic\";\n\n          // Create a container element for the release and append the artist and album elements\n          const releaseElem = document.createElement(\"div\");\n          releaseElem.appendChild(albumElem);\n          releaseElem.appendChild(artistElem);\n          releaseElem.style.paddingBottom = \"1em\";\n\n          // Append the container element to the collection list\n          collectionList.appendChild(releaseElem);\n        });\n      };\n\n      // Call the `fetchCollection` function when the page loads\n      window.onload = fetchCollection;\n    </script>\n  </body>\n</html>\n"],"names":["$$createAstro","$$createComponent","Astro","$$render","$$renderComponent","BaseHead","$$renderHead","Header"],"mappings":";;;;;;;;AAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,UAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,CAAA,CAAA,CAAAC,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,CAAA,CAAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA;AAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAC,cAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAC,gBAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAC,YAAA,EAQc,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAO,UAAY,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAa,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAzC,CAAA,CARL,CAAA,CAAAC,UAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAF,e}